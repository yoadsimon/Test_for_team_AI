import os
from typing import List, Optional, Dict, Any
import google.generativeai as genai
from dataclasses import dataclass
from dotenv import load_dotenv
import logging
from langchain_google_genai import GoogleGenerativeAIEmbeddings


@dataclass
class HighlightDescription:
    """Description of a video highlight generated by the LLM."""
    timestamp: float
    description: str
    summary: Optional[str] = None


class LLMService:
    """Service for interacting with Google's Gemini models."""

    def __init__(self):
        """Initialize the LLM service."""
        # Load environment variables
        load_dotenv()
        
        # Get API key from environment
        self.api_key = os.getenv("GOOGLE_API_KEY")
        if not self.api_key:
            raise ValueError("GOOGLE_API_KEY not found in environment variables. Please add it to your .env file.")
        
        try:
            # Configure the Gemini API
            genai.configure(api_key=self.api_key)
            
            # Initialize the model
            self.model = genai.GenerativeModel('models/gemini-1.5-flash')
            
            # Set up the generation config
            self.generation_config = {
                "temperature": 0.7,
                "top_p": 0.8,
                "top_k": 40,
                "max_output_tokens": 500,
            }

            # Set up logging
            self.logger = logging.getLogger(__name__)
        except Exception as e:
            raise RuntimeError(f"Failed to initialize Gemini API: {str(e)}")

    def _generate_completion(self, prompt: str) -> str:
        """
        Generate completion using Google's Gemini model.
        
        Args:
            prompt: The prompt to send to the model
            
        Returns:
            Generated text response
        """
        try:
            response = self.model.generate_content(
                prompt,
                generation_config=self.generation_config
            )
            return response.text
        except Exception as e:
            print(f"Error generating completion: {e}")
            raise

    def generate_highlight_description(
        self,
        visual_context: str,
        audio_context: str,
        timestamp: float
    ) -> HighlightDescription:
        """
        Generate a description for a video highlight using visual and audio context.
        
        Args:
            visual_context: Description of the visual content
            audio_context: Description of the audio content (speech or silence/background)
            timestamp: Timestamp of the highlight in seconds
            
        Returns:
            HighlightDescription object containing the description and summary
        """
        # Prepare prompt
        prompt = f"""You are a video content analyzer. Analyze this moment from a video (timestamp: {timestamp:.1f}s):

Visual content: {visual_context}
Audio content: {audio_context}

Please provide a concise but meaningful description that:
1. Integrates both visual and audio information naturally
2. Focuses on the most important aspects of the moment
3. Provides context about what's happening
4. Mentions any speech or significant audio if present
5. Describes the scene's atmosphere and mood

Format your response exactly as follows:
DESCRIPTION: [A clear, focused description that naturally combines visual and audio elements]
SUMMARY: [A one-sentence summary capturing the main point of this moment]
"""

        # Generate description
        text = self._generate_completion(prompt)

        # Parse response
        description = ""
        summary = None
        
        for line in text.split('\n'):
            if line.startswith('DESCRIPTION:'):
                description = line.replace('DESCRIPTION:', '').strip()
            elif line.startswith('SUMMARY:'):
                summary = line.replace('SUMMARY:', '').strip()

        if not description:
            description = text.strip()

        return HighlightDescription(
            timestamp=timestamp,
            description=description,
            summary=summary
        )

    def analyze_visual_content(self, frame_description: str) -> str:
        """
        Analyze visual content of a frame and generate a description.
        
        Args:
            frame_description: Description of the visual content
            
        Returns:
            Focused description of important visual content
        """
        prompt = f"""You are a video frame analyzer. Analyze this visual content from a video frame:

{frame_description}

Please provide a focused description of what's important in this frame. Focus on:
1. Key subjects (people, important objects)
2. Significant actions or events
3. Important visual information that adds meaning
4. Context clues about the setting or situation

Ignore technical details like lighting and color unless they're crucial to understanding the content.
Keep the description concise and meaningful.
"""

        return self._generate_completion(prompt)

    def generate_highlight_summary(
        self, highlights: List[HighlightDescription]
    ) -> str:
        """
        Generate a summary of multiple highlights.
        
        Args:
            highlights: List of highlight descriptions
            
        Returns:
            Summary of the highlights
        """
        if not highlights:
            return ""

        # Prepare prompt with all highlights
        prompt = """You are a video content summarizer. Here are the key moments from a video:

"""
        for h in highlights:
            prompt += f"At {h.timestamp:.1f}s: {h.description}\n"

        prompt += """
Please provide a concise but meaningful summary that:
1. Captures the main narrative or key points
2. Highlights the most important moments
3. Explains the overall context and significance
4. Connects related events or themes

Focus on telling the story of what happened in the video, not just listing events.
Keep the summary clear and engaging, around 2-3 sentences.
"""

        return self._generate_completion(prompt)

    def generate_text(self, prompt: str) -> str:
        """
        Generate text using the LLM.
        
        Args:
            prompt: The prompt to generate text from
            
        Returns:
            Generated text
        """
        try:
            response = self.model.generate_content(prompt)
            return response.text
        except Exception as e:
            self.logger.error(f"Failed to generate text: {e}")
            return "Error generating description."

    def generate_description(self, text: str) -> str:
        """Generate a description using the LLM."""
        try:
            model = genai.GenerativeModel('models/gemini-1.5-pro-latest')
            response = model.generate_content(text)
            return response.text
        except Exception as e:
            self.logger.error(f"Failed to generate description: {str(e)}")
            return "Error generating description."

    def generate_embedding(self, text: str) -> List[float]:
        """Generate an embedding for the given text using LangChain's GoogleGenerativeAIEmbeddings."""
        try:
            # Initialize the embedding model
            embedding_model = GoogleGenerativeAIEmbeddings(
                model="models/embedding-001",
                google_api_key=self.api_key,
                task_type="retrieval_document"
            )
            
            # Generate embedding
            embedding = embedding_model.embed_query(text)
            return embedding
            
        except Exception as e:
            self.logger.error(f"Failed to generate embedding using LangChain: {str(e)}")
            return [0.0] * 1536

    def generate_summary(self, highlights: List[Dict[str, Any]]) -> str:
        """Generate a summary of the highlights."""
        try:
            # Format highlights for the prompt
            highlights_text = "\n".join(
                f"At {h['timestamp']:.1f}s: {h['description']}"
                for h in highlights
            )
            
            prompt = f"""Please provide a concise summary of the following video highlights:

{highlights_text}

Summary:"""
            
            return self.generate_description(prompt)
        except Exception as e:
            self.logger.error(f"Failed to generate summary: {str(e)}")
            return "Error generating summary." 